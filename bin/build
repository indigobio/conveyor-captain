#!/bin/bash

# Fail fast.
set -e

status() {
  echo "\033[0;32m$@\033[0m"
}

error() {
  >&2 echo $@
}

retry() {
  local retry_max=$1
  shift

  local count=$retry_max
  while [ $count -gt 0 ]; do
    "$@" && break
    count=$(($count - 1))
    sleep 1
  done

  [ $count -eq 0 ] && {
    echo "Retry failed [$retry_max]: $@" >&2
    return 1
  }
  return 0
}

if [ -z "$REPOSITORY" ]; then
  error "REPOSITORY env var is required"
fi

if [ -z "$BRANCH" ]; then
  error "BRANCH env var is required"
fi

if [ -z "$SHA" ]; then
  error "SHA env var is required"
fi

# Captain namespace. https://github.com/harbur/captain/blob/32fb0d765cae2c15fb2fa15b5b989fb527704715/captain/cmd.go#L115-L117
export USER=`echo "${REPOSITORY}" | cut -f 1 -d '/'`

teardown() {
  local pid_file="/var/run/docker.pid"
  status "Stopping Docker..."
  if [ -e "$pid_file" ]; then
    kill -15 $(cat "$pid_file")
  fi
}

setup() {
  # Copy ssh keys from the data volume.
  cp -r /var/run/conveyor/.ssh /root/.ssh
  chown -R root:root ~/.ssh
  chmod -R 0600 ~/.ssh
  ssh-keyscan -t rsa github.com > ~/.ssh/known_hosts

  # Copy .dockercfg from the data volume.
  cp -r /var/run/conveyor/.dockercfg /root/.dockercfg

  status "Starting Docker..."
  wrapdocker
  docker version
}

clone() {
  status "Cloning..."
  # Clone the given branch and checkout the sha.
  git clone --depth 1 --branch="$BRANCH" "git@github.com:${REPOSITORY}.git" "$REPOSITORY"
  cd "$REPOSITORY"
  git checkout -qf "$SHA"
}

pull() {
  if [ "$CACHE" = "on" ]; then
    status "Pulling..."
    # Attempt to pull the last build image for this branch.
   captain pull 
  else
    status "Cache disabled. Not pulling."
  fi
}

build() {
  status "Building..."
  #CIRCLECI=true is a hack to workaround a bug in captain at the moment. 
  CIRCLECI=true captain build 
  status "Testing..."
  captain test
}

squasher()
{ 
    echo "Squashing images..."
    img=$1;
    docker save $img | docker-squash -t $img:latest | docker load;
    docker tag -f $img:latest $img:$BRANCH && docker tag -f $img:latest $img:$SHA
    echo "Pushing squashed images..."
    retry 3 docker push $img:latest
    retry 3 && docker push $img:$BRANCH
}

push() {
  if [ -z "$DRY" ]; then
    export BRANCH;
    export SHA;
    cat captain.yml | grep image | awk '{print $2}' | xargs -L 1 -I name bash -c 'squasher name $BRANCH $SHA'
  else
    status "Dry run enabled. Not pushing."
  fi
}

run() {
  setup
  clone && pull && build && push
}

trap teardown 0
export -f squasher
run
